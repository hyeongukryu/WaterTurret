
WaterTurret.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000490  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  00000504  2**0
                  ALLOC
  2 .debug_aranges 000000a0  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000231  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000786  00000000  00000000  000007d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000003e6  00000000  00000000  00000f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000723  00000000  00000000  00001341  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000200  00000000  00000000  00001a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000024e  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000297  00000000  00000000  00001eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00002149  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_15>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e9       	ldi	r30, 0x90	; 144
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 46 02 	jmp	0x48c	; 0x48c <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#include "serial.h"
#include "control.h"

int main()
{
	cli();
  ce:	f8 94       	cli

	init_port();
  d0:	0e 94 74 00 	call	0xe8	; 0xe8 <init_port>
	init_timer();
  d4:	0e 94 8b 00 	call	0x116	; 0x116 <init_timer>
	init_control();
  d8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <init_control>

	init_serial();
  dc:	0e 94 8c 00 	call	0x118	; 0x118 <init_serial>

	sei();
  e0:	78 94       	sei

	for(;;)
	{
		serial_loop();
  e2:	0e 94 10 01 	call	0x220	; 0x220 <serial_loop>
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <main+0x14>

000000e8 <init_port>:
void init_port()
{

#ifdef __AVR_ATmega128__

	PORTA = 0x00;
  e8:	1b ba       	out	0x1b, r1	; 27
	DDRA = 0x00;
  ea:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00;
  ec:	18 ba       	out	0x18, r1	; 24
	DDRB = 0x00;
  ee:	17 ba       	out	0x17, r1	; 23
	PORTC = 0x00;
  f0:	15 ba       	out	0x15, r1	; 21
	DDRC = 0x00;
  f2:	14 ba       	out	0x14, r1	; 20
	PORTD = 0x00;
  f4:	12 ba       	out	0x12, r1	; 18
	DDRD = 0x00;
  f6:	11 ba       	out	0x11, r1	; 17
	PORTE = 0x00;
  f8:	13 b8       	out	0x03, r1	; 3
	DDRE = 0x00;
  fa:	12 b8       	out	0x02, r1	; 2
	PORTF = 0x00;
  fc:	10 92 62 00 	sts	0x0062, r1
	DDRF = 0x00;
 100:	e1 e6       	ldi	r30, 0x61	; 97
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	10 82       	st	Z, r1

	// Pan Motor
	PAN_DDR |= 0xFF;
 106:	80 81       	ld	r24, Z
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	80 83       	st	Z, r24

	// Tilt Motor
	DDRB |= 0xFF;
 10c:	97 b3       	in	r25, 0x17	; 23
 10e:	87 bb       	out	0x17, r24	; 23

	// Pump, Valve
	DDRD |= 0xFF;
 110:	91 b3       	in	r25, 0x11	; 17
 112:	81 bb       	out	0x11, r24	; 17
	// PD7/OC2 : PUMP
	DDRC |= 0x80;
	DDRD |= 0x80;

#endif
}
 114:	08 95       	ret

00000116 <init_timer>:


void init_timer()
{
}
 116:	08 95       	ret

00000118 <init_serial>:
void init_serial()
{

#ifdef __AVR_ATmega128__

	UBRR0H = (unsigned char)(UBRR >> 8);
 118:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (unsigned char)UBRR;
 11c:	83 e3       	ldi	r24, 0x33	; 51
 11e:	89 b9       	out	0x09, r24	; 9

	UCSR0A = 0x00;
 120:	1b b8       	out	0x0b, r1	; 11
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	80 93 95 00 	sts	0x0095, r24
	UCSR0B = (1 << RXEN) | (1 << TXEN);
 128:	88 e1       	ldi	r24, 0x18	; 24
 12a:	8a b9       	out	0x0a, r24	; 10

	UCSRA = 0x00;
	UCSRC = (1 << UCSZ1) | (1 << UCSZ0);
	UCSRB = (1 << RXEN) | (1 << TXEN);
#endif
}
 12c:	08 95       	ret

0000012e <serial_tx>:

void serial_tx(char data)
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << UDRE)));
 12e:	5d 9b       	sbis	0x0b, 5	; 11
 130:	fe cf       	rjmp	.-4      	; 0x12e <serial_tx>
	UDR0 = data;
 132:	8c b9       	out	0x0c, r24	; 12

	while (!(UCSRA & (1 << UDRE)));
	UDR = data;

#endif
}
 134:	08 95       	ret

00000136 <serial_rx>:

char serial_rx()
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << RXC)));
 136:	5f 9b       	sbis	0x0b, 7	; 11
 138:	fe cf       	rjmp	.-4      	; 0x136 <serial_rx>
	return UDR0;
 13a:	8c b1       	in	r24, 0x0c	; 12

	while (!(UCSRA & (1 << RXC)));
	return UDR;

#endif
}
 13c:	08 95       	ret

0000013e <serial_tx_2>:

void serial_tx(char data)
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << UDRE)));
 13e:	5d 9b       	sbis	0x0b, 5	; 11
 140:	fe cf       	rjmp	.-4      	; 0x13e <serial_tx_2>
	UDR0 = data;
 142:	9c b9       	out	0x0c, r25	; 12

void serial_tx(char data)
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << UDRE)));
 144:	5d 9b       	sbis	0x0b, 5	; 11
 146:	fe cf       	rjmp	.-4      	; 0x144 <serial_tx_2+0x6>
	UDR0 = data;
 148:	8c b9       	out	0x0c, r24	; 12
void serial_tx_2(int data)
{
	// Big Endian
	serial_tx((data >> 8) & 0xFF);
	serial_tx(data & 0xFF);
}
 14a:	08 95       	ret

0000014c <serial_rx_2>:

char serial_rx()
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << RXC)));
 14c:	5f 9b       	sbis	0x0b, 7	; 11
 14e:	fe cf       	rjmp	.-4      	; 0x14c <serial_rx_2>
	return UDR0;
 150:	3c b1       	in	r19, 0x0c	; 12

char serial_rx()
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << RXC)));
 152:	5f 9b       	sbis	0x0b, 7	; 11
 154:	fe cf       	rjmp	.-4      	; 0x152 <serial_rx_2+0x6>
	return UDR0;
 156:	2c b1       	in	r18, 0x0c	; 12
 158:	93 2f       	mov	r25, r19
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	28 2b       	or	r18, r24
 160:	39 2b       	or	r19, r25
int serial_rx_2()
{
	// Big Endian
	int data = (int)serial_rx() << 8;
	return data | serial_rx();
}
 162:	c9 01       	movw	r24, r18
 164:	08 95       	ret

00000166 <serial_process>:
		TX_DATA(message.data[i]);
	}
}

void serial_process(message_t *message)
{
 166:	fc 01       	movw	r30, r24
	char type = message->type;
 168:	92 81       	ldd	r25, Z+2	; 0x02
	message->type = MESSAGE_OK;
 16a:	8a e2       	ldi	r24, 0x2A	; 42
 16c:	82 83       	std	Z+2, r24	; 0x02
	message->length = 0;
 16e:	13 82       	std	Z+3, r1	; 0x03

	switch(type)
 170:	9f 31       	cpi	r25, 0x1F	; 31
 172:	b1 f1       	breq	.+108    	; 0x1e0 <serial_process+0x7a>
 174:	90 32       	cpi	r25, 0x20	; 32
 176:	80 f4       	brcc	.+32     	; 0x198 <serial_process+0x32>
 178:	94 31       	cpi	r25, 0x14	; 20
 17a:	31 f1       	breq	.+76     	; 0x1c8 <serial_process+0x62>
 17c:	95 31       	cpi	r25, 0x15	; 21
 17e:	30 f4       	brcc	.+12     	; 0x18c <serial_process+0x26>
 180:	9a 30       	cpi	r25, 0x0A	; 10
 182:	d1 f0       	breq	.+52     	; 0x1b8 <serial_process+0x52>
 184:	9b 30       	cpi	r25, 0x0B	; 11
 186:	09 f0       	breq	.+2      	; 0x18a <serial_process+0x24>
 188:	47 c0       	rjmp	.+142    	; 0x218 <serial_process+0xb2>
 18a:	1a c0       	rjmp	.+52     	; 0x1c0 <serial_process+0x5a>
 18c:	95 31       	cpi	r25, 0x15	; 21
 18e:	01 f1       	breq	.+64     	; 0x1d0 <serial_process+0x6a>
 190:	9e 31       	cpi	r25, 0x1E	; 30
 192:	09 f0       	breq	.+2      	; 0x196 <serial_process+0x30>
 194:	41 c0       	rjmp	.+130    	; 0x218 <serial_process+0xb2>
 196:	20 c0       	rjmp	.+64     	; 0x1d8 <serial_process+0x72>
 198:	92 33       	cpi	r25, 0x32	; 50
 19a:	71 f1       	breq	.+92     	; 0x1f8 <serial_process+0x92>
 19c:	93 33       	cpi	r25, 0x33	; 51
 19e:	28 f4       	brcc	.+10     	; 0x1aa <serial_process+0x44>
 1a0:	98 32       	cpi	r25, 0x28	; 40
 1a2:	11 f1       	breq	.+68     	; 0x1e8 <serial_process+0x82>
 1a4:	99 32       	cpi	r25, 0x29	; 41
 1a6:	c1 f5       	brne	.+112    	; 0x218 <serial_process+0xb2>
 1a8:	23 c0       	rjmp	.+70     	; 0x1f0 <serial_process+0x8a>
 1aa:	94 33       	cpi	r25, 0x34	; 52
 1ac:	69 f1       	breq	.+90     	; 0x208 <serial_process+0xa2>
 1ae:	94 33       	cpi	r25, 0x34	; 52
 1b0:	38 f1       	brcs	.+78     	; 0x200 <serial_process+0x9a>
 1b2:	95 33       	cpi	r25, 0x35	; 53
 1b4:	89 f5       	brne	.+98     	; 0x218 <serial_process+0xb2>
 1b6:	2c c0       	rjmp	.+88     	; 0x210 <serial_process+0xaa>
	{
	case 10:	ServDeviceCheck(message);	break;
 1b8:	cf 01       	movw	r24, r30
 1ba:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <ServDeviceCheck>
 1be:	08 95       	ret
	case 11:	ServEmergency(message);		break;
 1c0:	cf 01       	movw	r24, r30
 1c2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ServEmergency>
 1c6:	08 95       	ret
	
	case 20:	ServPanGet(message);		break;
 1c8:	cf 01       	movw	r24, r30
 1ca:	0e 94 36 02 	call	0x46c	; 0x46c <ServPanGet>
 1ce:	08 95       	ret
	case 21:	ServPanSet(message);		break;
 1d0:	cf 01       	movw	r24, r30
 1d2:	0e 94 27 02 	call	0x44e	; 0x44e <ServPanSet>
 1d6:	08 95       	ret
	
	case 30:	ServTiltNozzleGet(message);	break;
 1d8:	cf 01       	movw	r24, r30
 1da:	0e 94 0b 02 	call	0x416	; 0x416 <ServTiltNozzleGet>
 1de:	08 95       	ret
	case 31:	ServTiltNozzleSet(message);	break;
 1e0:	cf 01       	movw	r24, r30
 1e2:	0e 94 13 02 	call	0x426	; 0x426 <ServTiltNozzleSet>
 1e6:	08 95       	ret
	
	case 40:	ServTiltCameraGet(message);	break;
 1e8:	cf 01       	movw	r24, r30
 1ea:	0e 94 19 02 	call	0x432	; 0x432 <ServTiltCameraGet>
 1ee:	08 95       	ret
	case 41:	ServTiltCameraSet(message);	break;
 1f0:	cf 01       	movw	r24, r30
 1f2:	0e 94 21 02 	call	0x442	; 0x442 <ServTiltCameraSet>
 1f6:	08 95       	ret
	
	case 50:	ServPumpOn(message);		break;
 1f8:	cf 01       	movw	r24, r30
 1fa:	0e 94 03 02 	call	0x406	; 0x406 <ServPumpOn>
 1fe:	08 95       	ret
	case 51:	ServPumpOff(message);		break;
 200:	cf 01       	movw	r24, r30
 202:	0e 94 05 02 	call	0x40a	; 0x40a <ServPumpOff>
 206:	08 95       	ret
	case 52:	ServValveOn(message);		break;
 208:	cf 01       	movw	r24, r30
 20a:	0e 94 07 02 	call	0x40e	; 0x40e <ServValveOn>
 20e:	08 95       	ret
	case 53:	ServValveOff(message);		break;
 210:	cf 01       	movw	r24, r30
 212:	0e 94 09 02 	call	0x412	; 0x412 <ServValveOff>
 216:	08 95       	ret

	default:
		message->type = MESSAGE_TYPE;
 218:	85 e6       	ldi	r24, 0x65	; 101
 21a:	82 83       	std	Z+2, r24	; 0x02
		message->length = 0;
 21c:	13 82       	std	Z+3, r1	; 0x03
 21e:	08 95       	ret

00000220 <serial_loop>:
	int data = (int)serial_rx() << 8;
	return data | serial_rx();
}

void serial_loop()
{
 220:	cf 92       	push	r12
 222:	df 92       	push	r13
 224:	ef 92       	push	r14
 226:	ff 92       	push	r15
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	df 93       	push	r29
 22e:	cf 93       	push	r28
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	64 97       	sbiw	r28, 0x14	; 20
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
	message_t message;

	message.sequence = RX_SEQUENCE();
 240:	0e 94 a6 00 	call	0x14c	; 0x14c <serial_rx_2>

char serial_rx()
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << RXC)));
 244:	5f 9b       	sbis	0x0b, 7	; 11
 246:	fe cf       	rjmp	.-4      	; 0x244 <serial_loop+0x24>
	return UDR0;
 248:	2c b1       	in	r18, 0x0c	; 12

char serial_rx()
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << RXC)));
 24a:	5f 9b       	sbis	0x0b, 7	; 11
 24c:	fe cf       	rjmp	.-4      	; 0x24a <serial_loop+0x2a>

void serial_loop()
{
	message_t message;

	message.sequence = RX_SEQUENCE();
 24e:	9a 83       	std	Y+2, r25	; 0x02
 250:	89 83       	std	Y+1, r24	; 0x01
	message.type = RX_TYPE();
 252:	2b 83       	std	Y+3, r18	; 0x03
char serial_rx()
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << RXC)));
	return UDR0;
 254:	8c b1       	in	r24, 0x0c	; 12
{
	message_t message;

	message.sequence = RX_SEQUENCE();
	message.type = RX_TYPE();
	message.length = RX_LENGTH();
 256:	8c 83       	std	Y+4, r24	; 0x04
 258:	85 e0       	ldi	r24, 0x05	; 5
 25a:	c8 2e       	mov	r12, r24
 25c:	d1 2c       	mov	r13, r1
 25e:	cc 0e       	add	r12, r28
 260:	dd 1e       	adc	r13, r29
 262:	76 01       	movw	r14, r12
 264:	00 e0       	ldi	r16, 0x00	; 0
 266:	10 e0       	ldi	r17, 0x00	; 0
 268:	08 c0       	rjmp	.+16     	; 0x27a <serial_loop+0x5a>
	for (int i = 0; i < message.length; i++)
	{
		message.data[i] = RX_DATA();
 26a:	0e 94 a6 00 	call	0x14c	; 0x14c <serial_rx_2>
 26e:	f7 01       	movw	r30, r14
 270:	81 93       	st	Z+, r24
 272:	91 93       	st	Z+, r25
 274:	7f 01       	movw	r14, r30
	message_t message;

	message.sequence = RX_SEQUENCE();
	message.type = RX_TYPE();
	message.length = RX_LENGTH();
	for (int i = 0; i < message.length; i++)
 276:	0f 5f       	subi	r16, 0xFF	; 255
 278:	1f 4f       	sbci	r17, 0xFF	; 255
 27a:	8c 81       	ldd	r24, Y+4	; 0x04
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	08 17       	cp	r16, r24
 280:	19 07       	cpc	r17, r25
 282:	9c f3       	brlt	.-26     	; 0x26a <serial_loop+0x4a>
	{
		message.data[i] = RX_DATA();
	}

	serial_process(&message);
 284:	ce 01       	movw	r24, r28
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	0e 94 b3 00 	call	0x166	; 0x166 <serial_process>

	TX_SEQUENCE(message.sequence);
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	9a 81       	ldd	r25, Y+2	; 0x02
 290:	0e 94 9f 00 	call	0x13e	; 0x13e <serial_tx_2>
	TX_TYPE(message.type);
 294:	8b 81       	ldd	r24, Y+3	; 0x03

void serial_tx(char data)
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << UDRE)));
 296:	5d 9b       	sbis	0x0b, 5	; 11
 298:	fe cf       	rjmp	.-4      	; 0x296 <serial_loop+0x76>
	UDR0 = data;
 29a:	8c b9       	out	0x0c, r24	; 12

	serial_process(&message);

	TX_SEQUENCE(message.sequence);
	TX_TYPE(message.type);
	TX_LENGTH(message.length);
 29c:	8c 81       	ldd	r24, Y+4	; 0x04

void serial_tx(char data)
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << UDRE)));
 29e:	5d 9b       	sbis	0x0b, 5	; 11
 2a0:	fe cf       	rjmp	.-4      	; 0x29e <serial_loop+0x7e>
	UDR0 = data;
 2a2:	8c b9       	out	0x0c, r24	; 12
 2a4:	00 e0       	ldi	r16, 0x00	; 0
 2a6:	10 e0       	ldi	r17, 0x00	; 0
 2a8:	08 c0       	rjmp	.+16     	; 0x2ba <serial_loop+0x9a>
	TX_SEQUENCE(message.sequence);
	TX_TYPE(message.type);
	TX_LENGTH(message.length);
	for (int i = 0; i < message.length; i++)
	{
		TX_DATA(message.data[i]);
 2aa:	f6 01       	movw	r30, r12
 2ac:	81 91       	ld	r24, Z+
 2ae:	91 91       	ld	r25, Z+
 2b0:	6f 01       	movw	r12, r30
 2b2:	0e 94 9f 00 	call	0x13e	; 0x13e <serial_tx_2>
	serial_process(&message);

	TX_SEQUENCE(message.sequence);
	TX_TYPE(message.type);
	TX_LENGTH(message.length);
	for (int i = 0; i < message.length; i++)
 2b6:	0f 5f       	subi	r16, 0xFF	; 255
 2b8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ba:	8c 81       	ldd	r24, Y+4	; 0x04
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	08 17       	cp	r16, r24
 2c0:	19 07       	cpc	r17, r25
 2c2:	9c f3       	brlt	.-26     	; 0x2aa <serial_loop+0x8a>
	{
		TX_DATA(message.data[i]);
	}
}
 2c4:	64 96       	adiw	r28, 0x14	; 20
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	f8 94       	cli
 2ca:	de bf       	out	0x3e, r29	; 62
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	cd bf       	out	0x3d, r28	; 61
 2d0:	cf 91       	pop	r28
 2d2:	df 91       	pop	r29
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	ff 90       	pop	r15
 2da:	ef 90       	pop	r14
 2dc:	df 90       	pop	r13
 2de:	cf 90       	pop	r12
 2e0:	08 95       	ret

000002e2 <init_control>:


void init_control()
{
	// Pump - Valve
	PUMP_OFF();
 2e2:	90 98       	cbi	0x12, 0	; 18
	VALVE_OFF();
 2e4:	91 98       	cbi	0x12, 1	; 18

#ifdef __AVR_ATmega128__

	// Timer 0 : Pan Motor
	TCCR0 = (1 << WGM01) | (1 << CS02) | (1 << CS01) | (1 << CS00);
 2e6:	8f e0       	ldi	r24, 0x0F	; 15
 2e8:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
 2ea:	12 be       	out	0x32, r1	; 50
	OCR0 = 62;
 2ec:	8e e3       	ldi	r24, 0x3E	; 62
 2ee:	81 bf       	out	0x31, r24	; 49
	TIMSK |= 1 << OCIE0;	
 2f0:	87 b7       	in	r24, 0x37	; 55
 2f2:	82 60       	ori	r24, 0x02	; 2
 2f4:	87 bf       	out	0x37, r24	; 55
	TIMSK |= 1 << OCIE0;	

#endif

	// Timer 1 : Tilt Motor
	TCNT1 = 0;
 2f6:	1d bc       	out	0x2d, r1	; 45
 2f8:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 20000;
 2fa:	80 e2       	ldi	r24, 0x20	; 32
 2fc:	9e e4       	ldi	r25, 0x4E	; 78
 2fe:	97 bd       	out	0x27, r25	; 39
 300:	86 bd       	out	0x26, r24	; 38
	TILT_NOZZLE = TILT_INIT;
 302:	8c ed       	ldi	r24, 0xDC	; 220
 304:	95 e0       	ldi	r25, 0x05	; 5
 306:	9b bd       	out	0x2b, r25	; 43
 308:	8a bd       	out	0x2a, r24	; 42
	TILT_CAMERA = TILT_INIT;
 30a:	99 bd       	out	0x29, r25	; 41
 30c:	88 bd       	out	0x28, r24	; 40

	TCCR1A = (1 << COM1A1) | (1 << COM1B1);
 30e:	80 ea       	ldi	r24, 0xA0	; 160
 310:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13) | (1 << CS11);
 312:	82 e1       	ldi	r24, 0x12	; 18
 314:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= 0;
 316:	87 b7       	in	r24, 0x37	; 55
 318:	87 bf       	out	0x37, r24	; 55
	TIFR = 0;
 31a:	16 be       	out	0x36, r1	; 54

	// Pan
	PAN_ENABLE();
 31c:	e2 e6       	ldi	r30, 0x62	; 98
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	80 68       	ori	r24, 0x80	; 128
 324:	80 83       	st	Z, r24
}
 326:	08 95       	ret

00000328 <__vector_15>:

ISR(SIG_OUTPUT_COMPARE0)
{
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	2f 93       	push	r18
 334:	3f 93       	push	r19
 336:	8f 93       	push	r24
 338:	9f 93       	push	r25
}


static void move_pan()
{
	if (current_step != aimed_step)
 33a:	20 91 00 01 	lds	r18, 0x0100
 33e:	30 91 01 01 	lds	r19, 0x0101
 342:	80 91 02 01 	lds	r24, 0x0102
 346:	90 91 03 01 	lds	r25, 0x0103
 34a:	28 17       	cp	r18, r24
 34c:	39 07       	cpc	r19, r25
 34e:	91 f1       	breq	.+100    	; 0x3b4 <__vector_15+0x8c>
	{
		int diff = current_step - aimed_step;
 350:	80 91 00 01 	lds	r24, 0x0100
 354:	90 91 01 01 	lds	r25, 0x0101
 358:	20 91 02 01 	lds	r18, 0x0102
 35c:	30 91 03 01 	lds	r19, 0x0103

		if (diff > 0)
 360:	82 1b       	sub	r24, r18
 362:	93 0b       	sbc	r25, r19
 364:	18 16       	cp	r1, r24
 366:	19 06       	cpc	r1, r25
 368:	8c f4       	brge	.+34     	; 0x38c <__vector_15+0x64>
		{
			PAN_CCW();
 36a:	80 91 62 00 	lds	r24, 0x0062
 36e:	82 60       	ori	r24, 0x02	; 2
 370:	80 93 62 00 	sts	0x0062, r24
			PAN_CLOCK();
 374:	80 91 62 00 	lds	r24, 0x0062
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	89 27       	eor	r24, r25
 37c:	80 93 62 00 	sts	0x0062, r24
			current_step--;
 380:	80 91 00 01 	lds	r24, 0x0100
 384:	90 91 01 01 	lds	r25, 0x0101
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	10 c0       	rjmp	.+32     	; 0x3ac <__vector_15+0x84>
		}
		else
		{
			PAN_CW();
 38c:	80 91 62 00 	lds	r24, 0x0062
 390:	8d 7f       	andi	r24, 0xFD	; 253
 392:	80 93 62 00 	sts	0x0062, r24
			PAN_CLOCK();
 396:	80 91 62 00 	lds	r24, 0x0062
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	89 27       	eor	r24, r25
 39e:	80 93 62 00 	sts	0x0062, r24
			current_step++;
 3a2:	80 91 00 01 	lds	r24, 0x0100
 3a6:	90 91 01 01 	lds	r25, 0x0101
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	90 93 01 01 	sts	0x0101, r25
 3b0:	80 93 00 01 	sts	0x0100, r24
}

ISR(SIG_OUTPUT_COMPARE0)
{
	move_pan();
}
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	3f 91       	pop	r19
 3ba:	2f 91       	pop	r18
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

000003c6 <set_pan>:
	}
}

void set_pan(int step)
{
	aimed_step = step;
 3c6:	90 93 03 01 	sts	0x0103, r25
 3ca:	80 93 02 01 	sts	0x0102, r24
}
 3ce:	08 95       	ret

000003d0 <wait_pan>:

void wait_pan()
{
	while (current_step != aimed_step);
 3d0:	20 91 00 01 	lds	r18, 0x0100
 3d4:	30 91 01 01 	lds	r19, 0x0101
 3d8:	80 91 02 01 	lds	r24, 0x0102
 3dc:	90 91 03 01 	lds	r25, 0x0103
 3e0:	28 17       	cp	r18, r24
 3e2:	39 07       	cpc	r19, r25
 3e4:	a9 f7       	brne	.-22     	; 0x3d0 <wait_pan>
}
 3e6:	08 95       	ret

000003e8 <get_pan>:

int get_pan()
{
	return current_step;
 3e8:	20 91 00 01 	lds	r18, 0x0100
 3ec:	30 91 01 01 	lds	r19, 0x0101
}
 3f0:	c9 01       	movw	r24, r18
 3f2:	08 95       	ret

000003f4 <ServDeviceCheck>:
#include "control.h"


void ServDeviceCheck(message_t *m)
{
}
 3f4:	08 95       	ret

000003f6 <ServEmergency>:

void ServEmergency(message_t *m)
{
	PAN_DISABLE();
 3f6:	e2 e6       	ldi	r30, 0x62	; 98
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	8f 77       	andi	r24, 0x7F	; 127
 3fe:	80 83       	st	Z, r24
	VALVE_OFF();
 400:	91 98       	cbi	0x12, 1	; 18
	PUMP_OFF();
 402:	90 98       	cbi	0x12, 0	; 18
}
 404:	08 95       	ret

00000406 <ServPumpOn>:

void ServPumpOn(message_t *m)
{
	PUMP_ON();
 406:	90 9a       	sbi	0x12, 0	; 18
}
 408:	08 95       	ret

0000040a <ServPumpOff>:

void ServPumpOff(message_t *m)
{
	PUMP_OFF();
 40a:	90 98       	cbi	0x12, 0	; 18
}
 40c:	08 95       	ret

0000040e <ServValveOn>:

void ServValveOn(message_t *m)
{
	VALVE_ON();
 40e:	91 9a       	sbi	0x12, 1	; 18
}
 410:	08 95       	ret

00000412 <ServValveOff>:

void ServValveOff(message_t *m)
{
	VALVE_OFF();
 412:	91 98       	cbi	0x12, 1	; 18
}
 414:	08 95       	ret

00000416 <ServTiltNozzleGet>:
	// sync
	wait_pan();
}

void ServTiltNozzleGet(message_t *m)
{
 416:	fc 01       	movw	r30, r24
	m->length = 1;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	83 83       	std	Z+3, r24	; 0x03
	m->data[0] = TILT_NOZZLE;
 41c:	8a b5       	in	r24, 0x2a	; 42
 41e:	9b b5       	in	r25, 0x2b	; 43
 420:	95 83       	std	Z+5, r25	; 0x05
 422:	84 83       	std	Z+4, r24	; 0x04
}
 424:	08 95       	ret

00000426 <ServTiltNozzleSet>:

void ServTiltNozzleSet(message_t *m)
{
	TILT_NOZZLE = m->data[0];
 426:	fc 01       	movw	r30, r24
 428:	84 81       	ldd	r24, Z+4	; 0x04
 42a:	95 81       	ldd	r25, Z+5	; 0x05
 42c:	9b bd       	out	0x2b, r25	; 43
 42e:	8a bd       	out	0x2a, r24	; 42
}
 430:	08 95       	ret

00000432 <ServTiltCameraGet>:

void ServTiltCameraGet(message_t *m)
{
 432:	fc 01       	movw	r30, r24
	m->length = 1;
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	83 83       	std	Z+3, r24	; 0x03
	m->data[0] = TILT_CAMERA;
 438:	88 b5       	in	r24, 0x28	; 40
 43a:	99 b5       	in	r25, 0x29	; 41
 43c:	95 83       	std	Z+5, r25	; 0x05
 43e:	84 83       	std	Z+4, r24	; 0x04
}
 440:	08 95       	ret

00000442 <ServTiltCameraSet>:

void ServTiltCameraSet(message_t *m)
{
	TILT_CAMERA = m->data[0];
 442:	fc 01       	movw	r30, r24
 444:	84 81       	ldd	r24, Z+4	; 0x04
 446:	95 81       	ldd	r25, Z+5	; 0x05
 448:	99 bd       	out	0x29, r25	; 41
 44a:	88 bd       	out	0x28, r24	; 40
}
 44c:	08 95       	ret

0000044e <ServPanSet>:
	m->length = 1;
	m->data[0] = get_pan();
}

void ServPanSet(message_t *m)
{
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
 452:	8c 01       	movw	r16, r24
	wait_pan();
 454:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <wait_pan>
	set_pan(m->data[0]);
 458:	f8 01       	movw	r30, r16
 45a:	84 81       	ldd	r24, Z+4	; 0x04
 45c:	95 81       	ldd	r25, Z+5	; 0x05
 45e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <set_pan>
	
	// sync
	wait_pan();
 462:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <wait_pan>
}
 466:	1f 91       	pop	r17
 468:	0f 91       	pop	r16
 46a:	08 95       	ret

0000046c <ServPanGet>:
	VALVE_OFF();
}


void ServPanGet(message_t *m)
{
 46c:	0f 93       	push	r16
 46e:	1f 93       	push	r17
 470:	8c 01       	movw	r16, r24
	wait_pan();
 472:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <wait_pan>
	m->length = 1;
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	f8 01       	movw	r30, r16
 47a:	83 83       	std	Z+3, r24	; 0x03
	m->data[0] = get_pan();
 47c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <get_pan>
 480:	f8 01       	movw	r30, r16
 482:	95 83       	std	Z+5, r25	; 0x05
 484:	84 83       	std	Z+4, r24	; 0x04
}
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	08 95       	ret

0000048c <_exit>:
 48c:	f8 94       	cli

0000048e <__stop_program>:
 48e:	ff cf       	rjmp	.-2      	; 0x48e <__stop_program>
