
WaterTurret.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000658  000006ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000658  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010a  0080010a  000006f6  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  000006f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000297  00000000  00000000  00000796  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000861  00000000  00000000  00000a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000040a  00000000  00000000  0000128e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ff  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000230  00000000  00000000  00001e98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a7  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000297  00000000  00000000  0000236f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002606  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_9>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_12>
  34:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__vector_13>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_15>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e5       	ldi	r30, 0x58	; 88
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 31       	cpi	r26, 0x17	; 23
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 2a 03 	jmp	0x654	; 0x654 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#include "serial.h"
#include "control.h"

int main()
{
	cli();
  ce:	f8 94       	cli

	init_port();
  d0:	0e 94 74 00 	call	0xe8	; 0xe8 <init_port>
	init_timer();
  d4:	0e 94 8c 00 	call	0x118	; 0x118 <init_timer>
	init_control();
  d8:	0e 94 10 02 	call	0x420	; 0x420 <init_control>

	init_serial();
  dc:	0e 94 2b 01 	call	0x256	; 0x256 <init_serial>

	sei();
  e0:	78 94       	sei

	for(;;)
	{
		serial_loop();
  e2:	0e 94 af 01 	call	0x35e	; 0x35e <serial_loop>
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <main+0x14>

000000e8 <init_port>:
void init_port()
{

#ifdef __AVR_ATmega128__

	PORTA = 0x00;
  e8:	1b ba       	out	0x1b, r1	; 27
	DDRA = 0x00;
  ea:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00;
  ec:	18 ba       	out	0x18, r1	; 24
	DDRB = 0x00;
  ee:	17 ba       	out	0x17, r1	; 23
	PORTC = 0x00;
  f0:	15 ba       	out	0x15, r1	; 21
	DDRC = 0x00;
  f2:	14 ba       	out	0x14, r1	; 20
	PORTD = 0x00;
  f4:	12 ba       	out	0x12, r1	; 18
	DDRD = 0x00;
  f6:	11 ba       	out	0x11, r1	; 17
	PORTE = 0x00;
  f8:	13 b8       	out	0x03, r1	; 3
	DDRE = 0x00;
  fa:	12 b8       	out	0x02, r1	; 2
	PORTF = 0x00;
  fc:	10 92 62 00 	sts	0x0062, r1
	DDRF = 0x00;
 100:	e1 e6       	ldi	r30, 0x61	; 97
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	10 82       	st	Z, r1

	// Pan Motor
	PAN_DDR |= 0xFF;
 106:	80 81       	ld	r24, Z
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	80 83       	st	Z, r24

	// Tilt Motor
	DDRB |= 0xFF;
 10c:	97 b3       	in	r25, 0x17	; 23
 10e:	87 bb       	out	0x17, r24	; 23

	// Pump, Valve
	DDRD |= 0xFF;
 110:	91 b3       	in	r25, 0x11	; 17
 112:	81 bb       	out	0x11, r24	; 17

	TIMSK = 0x00;
 114:	17 be       	out	0x37, r1	; 55

#else
#endif
}
 116:	08 95       	ret

00000118 <init_timer>:


void init_timer()
{
	// Timer 2 : FND
	TCCR2 = (1 << WGM21) | (1 << CS22);
 118:	8c e0       	ldi	r24, 0x0C	; 12
 11a:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0x00;
 11c:	14 bc       	out	0x24, r1	; 36
	OCR2 = 62;
 11e:	8e e3       	ldi	r24, 0x3E	; 62
 120:	83 bd       	out	0x23, r24	; 35
	TIMSK |= 1 << OCIE2;
 122:	87 b7       	in	r24, 0x37	; 55
 124:	80 68       	ori	r24, 0x80	; 128
 126:	87 bf       	out	0x37, r24	; 55
	
	DDRA = 0xFF;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0x0F;
 12c:	8f e0       	ldi	r24, 0x0F	; 15
 12e:	84 bb       	out	0x14, r24	; 20
}
 130:	08 95       	ret

00000132 <__vector_9>:

const char FndTable[10] = {63, 6, 91, 79, 102, 109, 125, 39, 127, 103};
unsigned char FndData[4] = {0,0,0,0};

ISR(SIG_OUTPUT_COMPARE2)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	0b b6       	in	r0, 0x3b	; 59
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
	if (second++ == 1000)
 156:	80 91 0c 01 	lds	r24, 0x010C
 15a:	90 91 0d 01 	lds	r25, 0x010D
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	90 93 0d 01 	sts	0x010D, r25
 164:	80 93 0c 01 	sts	0x010C, r24
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	88 5e       	subi	r24, 0xE8	; 232
 16c:	93 40       	sbci	r25, 0x03	; 3
 16e:	09 f0       	breq	.+2      	; 0x172 <__vector_9+0x40>
 170:	40 c0       	rjmp	.+128    	; 0x1f2 <__vector_9+0xc0>
	{
		second = 0;
 172:	10 92 0d 01 	sts	0x010D, r1
 176:	10 92 0c 01 	sts	0x010C, r1
		if(++time == 10000)
 17a:	80 91 0a 01 	lds	r24, 0x010A
 17e:	90 91 0b 01 	lds	r25, 0x010B
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	90 93 0b 01 	sts	0x010B, r25
 188:	80 93 0a 01 	sts	0x010A, r24
 18c:	80 51       	subi	r24, 0x10	; 16
 18e:	97 42       	sbci	r25, 0x27	; 39
 190:	21 f4       	brne	.+8      	; 0x19a <__vector_9+0x68>
		{
			time = 0;
 192:	10 92 0b 01 	sts	0x010B, r1
 196:	10 92 0a 01 	sts	0x010A, r1
		}

		FndData[0] = (time % 10000) / 1000;
 19a:	20 91 0a 01 	lds	r18, 0x010A
 19e:	30 91 0b 01 	lds	r19, 0x010B
 1a2:	c9 01       	movw	r24, r18
 1a4:	60 e1       	ldi	r22, 0x10	; 16
 1a6:	77 e2       	ldi	r23, 0x27	; 39
 1a8:	0e 94 03 03 	call	0x606	; 0x606 <__divmodhi4>
 1ac:	68 ee       	ldi	r22, 0xE8	; 232
 1ae:	73 e0       	ldi	r23, 0x03	; 3
 1b0:	0e 94 03 03 	call	0x606	; 0x606 <__divmodhi4>
 1b4:	60 93 0f 01 	sts	0x010F, r22
	    FndData[1] = (time % 1000) / 100;
 1b8:	c9 01       	movw	r24, r18
 1ba:	68 ee       	ldi	r22, 0xE8	; 232
 1bc:	73 e0       	ldi	r23, 0x03	; 3
 1be:	0e 94 03 03 	call	0x606	; 0x606 <__divmodhi4>
 1c2:	64 e6       	ldi	r22, 0x64	; 100
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	0e 94 03 03 	call	0x606	; 0x606 <__divmodhi4>
 1ca:	60 93 10 01 	sts	0x0110, r22
        FndData[2] = (time % 100) / 10;
 1ce:	c9 01       	movw	r24, r18
 1d0:	64 e6       	ldi	r22, 0x64	; 100
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	0e 94 03 03 	call	0x606	; 0x606 <__divmodhi4>
 1d8:	6a e0       	ldi	r22, 0x0A	; 10
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	0e 94 03 03 	call	0x606	; 0x606 <__divmodhi4>
 1e0:	60 93 11 01 	sts	0x0111, r22
        FndData[3] = time % 10;
 1e4:	c9 01       	movw	r24, r18
 1e6:	6a e0       	ldi	r22, 0x0A	; 10
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	0e 94 03 03 	call	0x606	; 0x606 <__divmodhi4>
 1ee:	80 93 12 01 	sts	0x0112, r24
	}

	if(++digit == 4)
 1f2:	80 91 0e 01 	lds	r24, 0x010E
 1f6:	8f 5f       	subi	r24, 0xFF	; 255
 1f8:	80 93 0e 01 	sts	0x010E, r24
 1fc:	84 30       	cpi	r24, 0x04	; 4
 1fe:	11 f4       	brne	.+4      	; 0x204 <__vector_9+0xd2>
	{
		digit = 0;
 200:	10 92 0e 01 	sts	0x010E, r1
	}
	
	PORTC = 0x0F;
 204:	8f e0       	ldi	r24, 0x0F	; 15
 206:	85 bb       	out	0x15, r24	; 21
	PORTA = FndTable[FndData[digit]];
 208:	20 91 0e 01 	lds	r18, 0x010E
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	f9 01       	movw	r30, r18
 210:	e1 5f       	subi	r30, 0xF1	; 241
 212:	fe 4f       	sbci	r31, 0xFE	; 254
 214:	e0 81       	ld	r30, Z
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	e0 50       	subi	r30, 0x00	; 0
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	80 81       	ld	r24, Z
 21e:	8b bb       	out	0x1b, r24	; 27
	PORTC = ~(0x01 << digit);	
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <__vector_9+0xf8>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	2a 95       	dec	r18
 22c:	e2 f7       	brpl	.-8      	; 0x226 <__vector_9+0xf4>
 22e:	80 95       	com	r24
 230:	85 bb       	out	0x15, r24	; 21
}
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	7f 91       	pop	r23
 240:	6f 91       	pop	r22
 242:	5f 91       	pop	r21
 244:	3f 91       	pop	r19
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0b be       	out	0x3b, r0	; 59
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <init_serial>:
void init_serial()
{

#ifdef __AVR_ATmega128__

	UBRR0H = (unsigned char)(UBRR >> 8);
 256:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (unsigned char)UBRR;
 25a:	83 e3       	ldi	r24, 0x33	; 51
 25c:	89 b9       	out	0x09, r24	; 9

	UCSR0A = 0x00;
 25e:	1b b8       	out	0x0b, r1	; 11
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);
 260:	86 e0       	ldi	r24, 0x06	; 6
 262:	80 93 95 00 	sts	0x0095, r24
	UCSR0B = (1 << RXEN) | (1 << TXEN);
 266:	88 e1       	ldi	r24, 0x18	; 24
 268:	8a b9       	out	0x0a, r24	; 10

#else
#endif
}
 26a:	08 95       	ret

0000026c <serial_tx>:

void serial_tx(char data)
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << UDRE)));
 26c:	5d 9b       	sbis	0x0b, 5	; 11
 26e:	fe cf       	rjmp	.-4      	; 0x26c <serial_tx>
	UDR0 = data;
 270:	8c b9       	out	0x0c, r24	; 12

#else
#endif
}
 272:	08 95       	ret

00000274 <serial_rx>:

char serial_rx()
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << RXC)));
 274:	5f 9b       	sbis	0x0b, 7	; 11
 276:	fe cf       	rjmp	.-4      	; 0x274 <serial_rx>
	return UDR0;
 278:	8c b1       	in	r24, 0x0c	; 12

#else
#endif
}
 27a:	08 95       	ret

0000027c <serial_tx_2>:

void serial_tx(char data)
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << UDRE)));
 27c:	5d 9b       	sbis	0x0b, 5	; 11
 27e:	fe cf       	rjmp	.-4      	; 0x27c <serial_tx_2>
	UDR0 = data;
 280:	9c b9       	out	0x0c, r25	; 12

void serial_tx(char data)
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << UDRE)));
 282:	5d 9b       	sbis	0x0b, 5	; 11
 284:	fe cf       	rjmp	.-4      	; 0x282 <serial_tx_2+0x6>
	UDR0 = data;
 286:	8c b9       	out	0x0c, r24	; 12
void serial_tx_2(int data)
{
	// Big Endian
	serial_tx((data >> 8) & 0xFF);
	serial_tx(data & 0xFF);
}
 288:	08 95       	ret

0000028a <serial_rx_2>:

char serial_rx()
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << RXC)));
 28a:	5f 9b       	sbis	0x0b, 7	; 11
 28c:	fe cf       	rjmp	.-4      	; 0x28a <serial_rx_2>
	return UDR0;
 28e:	3c b1       	in	r19, 0x0c	; 12

char serial_rx()
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << RXC)));
 290:	5f 9b       	sbis	0x0b, 7	; 11
 292:	fe cf       	rjmp	.-4      	; 0x290 <serial_rx_2+0x6>
	return UDR0;
 294:	2c b1       	in	r18, 0x0c	; 12
 296:	93 2f       	mov	r25, r19
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	28 2b       	or	r18, r24
 29e:	39 2b       	or	r19, r25
int serial_rx_2()
{
	// Big Endian
	int data = (int)serial_rx() << 8;
	return data | serial_rx();
}
 2a0:	c9 01       	movw	r24, r18
 2a2:	08 95       	ret

000002a4 <serial_process>:
		TX_DATA(message.data[i]);
	}
}

void serial_process(message_t *message)
{
 2a4:	fc 01       	movw	r30, r24
	char type = message->type;
 2a6:	92 81       	ldd	r25, Z+2	; 0x02
	message->type = MESSAGE_OK;
 2a8:	8a e2       	ldi	r24, 0x2A	; 42
 2aa:	82 83       	std	Z+2, r24	; 0x02
	message->length = 0;
 2ac:	13 82       	std	Z+3, r1	; 0x03

	switch(type)
 2ae:	9f 31       	cpi	r25, 0x1F	; 31
 2b0:	b1 f1       	breq	.+108    	; 0x31e <serial_process+0x7a>
 2b2:	90 32       	cpi	r25, 0x20	; 32
 2b4:	80 f4       	brcc	.+32     	; 0x2d6 <serial_process+0x32>
 2b6:	94 31       	cpi	r25, 0x14	; 20
 2b8:	31 f1       	breq	.+76     	; 0x306 <serial_process+0x62>
 2ba:	95 31       	cpi	r25, 0x15	; 21
 2bc:	30 f4       	brcc	.+12     	; 0x2ca <serial_process+0x26>
 2be:	9a 30       	cpi	r25, 0x0A	; 10
 2c0:	d1 f0       	breq	.+52     	; 0x2f6 <serial_process+0x52>
 2c2:	9b 30       	cpi	r25, 0x0B	; 11
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <serial_process+0x24>
 2c6:	47 c0       	rjmp	.+142    	; 0x356 <serial_process+0xb2>
 2c8:	1a c0       	rjmp	.+52     	; 0x2fe <serial_process+0x5a>
 2ca:	95 31       	cpi	r25, 0x15	; 21
 2cc:	01 f1       	breq	.+64     	; 0x30e <serial_process+0x6a>
 2ce:	9e 31       	cpi	r25, 0x1E	; 30
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <serial_process+0x30>
 2d2:	41 c0       	rjmp	.+130    	; 0x356 <serial_process+0xb2>
 2d4:	20 c0       	rjmp	.+64     	; 0x316 <serial_process+0x72>
 2d6:	92 33       	cpi	r25, 0x32	; 50
 2d8:	71 f1       	breq	.+92     	; 0x336 <serial_process+0x92>
 2da:	93 33       	cpi	r25, 0x33	; 51
 2dc:	28 f4       	brcc	.+10     	; 0x2e8 <serial_process+0x44>
 2de:	98 32       	cpi	r25, 0x28	; 40
 2e0:	11 f1       	breq	.+68     	; 0x326 <serial_process+0x82>
 2e2:	99 32       	cpi	r25, 0x29	; 41
 2e4:	c1 f5       	brne	.+112    	; 0x356 <serial_process+0xb2>
 2e6:	23 c0       	rjmp	.+70     	; 0x32e <serial_process+0x8a>
 2e8:	94 33       	cpi	r25, 0x34	; 52
 2ea:	69 f1       	breq	.+90     	; 0x346 <serial_process+0xa2>
 2ec:	94 33       	cpi	r25, 0x34	; 52
 2ee:	38 f1       	brcs	.+78     	; 0x33e <serial_process+0x9a>
 2f0:	95 33       	cpi	r25, 0x35	; 53
 2f2:	89 f5       	brne	.+98     	; 0x356 <serial_process+0xb2>
 2f4:	2c c0       	rjmp	.+88     	; 0x34e <serial_process+0xaa>
	{
	case 10:	ServDeviceCheck(message);	break;
 2f6:	cf 01       	movw	r24, r30
 2f8:	0e 94 b7 02 	call	0x56e	; 0x56e <ServDeviceCheck>
 2fc:	08 95       	ret
	case 11:	ServEmergency(message);		break;
 2fe:	cf 01       	movw	r24, r30
 300:	0e 94 b8 02 	call	0x570	; 0x570 <ServEmergency>
 304:	08 95       	ret
	
	case 20:	ServPanGet(message);		break;
 306:	cf 01       	movw	r24, r30
 308:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <ServPanGet>
 30c:	08 95       	ret
	case 21:	ServPanSet(message);		break;
 30e:	cf 01       	movw	r24, r30
 310:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ServPanSet>
 314:	08 95       	ret
	
	case 30:	ServTiltNozzleGet(message);	break;
 316:	cf 01       	movw	r24, r30
 318:	0e 94 c8 02 	call	0x590	; 0x590 <ServTiltNozzleGet>
 31c:	08 95       	ret
	case 31:	ServTiltNozzleSet(message);	break;
 31e:	cf 01       	movw	r24, r30
 320:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <ServTiltNozzleSet>
 324:	08 95       	ret
	
	case 40:	ServTiltCameraGet(message);	break;
 326:	cf 01       	movw	r24, r30
 328:	0e 94 d6 02 	call	0x5ac	; 0x5ac <ServTiltCameraGet>
 32c:	08 95       	ret
	case 41:	ServTiltCameraSet(message);	break;
 32e:	cf 01       	movw	r24, r30
 330:	0e 94 de 02 	call	0x5bc	; 0x5bc <ServTiltCameraSet>
 334:	08 95       	ret
	
	case 50:	ServPumpOn(message);		break;
 336:	cf 01       	movw	r24, r30
 338:	0e 94 c0 02 	call	0x580	; 0x580 <ServPumpOn>
 33c:	08 95       	ret
	case 51:	ServPumpOff(message);		break;
 33e:	cf 01       	movw	r24, r30
 340:	0e 94 c2 02 	call	0x584	; 0x584 <ServPumpOff>
 344:	08 95       	ret
	case 52:	ServValveOn(message);		break;
 346:	cf 01       	movw	r24, r30
 348:	0e 94 c4 02 	call	0x588	; 0x588 <ServValveOn>
 34c:	08 95       	ret
	case 53:	ServValveOff(message);		break;
 34e:	cf 01       	movw	r24, r30
 350:	0e 94 c6 02 	call	0x58c	; 0x58c <ServValveOff>
 354:	08 95       	ret

	default:
		message->type = MESSAGE_TYPE;
 356:	85 e6       	ldi	r24, 0x65	; 101
 358:	82 83       	std	Z+2, r24	; 0x02
		message->length = 0;
 35a:	13 82       	std	Z+3, r1	; 0x03
 35c:	08 95       	ret

0000035e <serial_loop>:
	int data = (int)serial_rx() << 8;
	return data | serial_rx();
}

void serial_loop()
{
 35e:	cf 92       	push	r12
 360:	df 92       	push	r13
 362:	ef 92       	push	r14
 364:	ff 92       	push	r15
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	df 93       	push	r29
 36c:	cf 93       	push	r28
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
 372:	64 97       	sbiw	r28, 0x14	; 20
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	f8 94       	cli
 378:	de bf       	out	0x3e, r29	; 62
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	cd bf       	out	0x3d, r28	; 61
	message_t message;

	message.sequence = RX_SEQUENCE();
 37e:	0e 94 45 01 	call	0x28a	; 0x28a <serial_rx_2>

char serial_rx()
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << RXC)));
 382:	5f 9b       	sbis	0x0b, 7	; 11
 384:	fe cf       	rjmp	.-4      	; 0x382 <serial_loop+0x24>
	return UDR0;
 386:	2c b1       	in	r18, 0x0c	; 12

char serial_rx()
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << RXC)));
 388:	5f 9b       	sbis	0x0b, 7	; 11
 38a:	fe cf       	rjmp	.-4      	; 0x388 <serial_loop+0x2a>

void serial_loop()
{
	message_t message;

	message.sequence = RX_SEQUENCE();
 38c:	9a 83       	std	Y+2, r25	; 0x02
 38e:	89 83       	std	Y+1, r24	; 0x01
	message.type = RX_TYPE();
 390:	2b 83       	std	Y+3, r18	; 0x03
char serial_rx()
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << RXC)));
	return UDR0;
 392:	8c b1       	in	r24, 0x0c	; 12
{
	message_t message;

	message.sequence = RX_SEQUENCE();
	message.type = RX_TYPE();
	message.length = RX_LENGTH();
 394:	8c 83       	std	Y+4, r24	; 0x04
 396:	85 e0       	ldi	r24, 0x05	; 5
 398:	c8 2e       	mov	r12, r24
 39a:	d1 2c       	mov	r13, r1
 39c:	cc 0e       	add	r12, r28
 39e:	dd 1e       	adc	r13, r29
 3a0:	76 01       	movw	r14, r12
 3a2:	00 e0       	ldi	r16, 0x00	; 0
 3a4:	10 e0       	ldi	r17, 0x00	; 0
 3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <serial_loop+0x5a>
	for (int i = 0; i < message.length; i++)
	{
		message.data[i] = RX_DATA();
 3a8:	0e 94 45 01 	call	0x28a	; 0x28a <serial_rx_2>
 3ac:	f7 01       	movw	r30, r14
 3ae:	81 93       	st	Z+, r24
 3b0:	91 93       	st	Z+, r25
 3b2:	7f 01       	movw	r14, r30
	message_t message;

	message.sequence = RX_SEQUENCE();
	message.type = RX_TYPE();
	message.length = RX_LENGTH();
	for (int i = 0; i < message.length; i++)
 3b4:	0f 5f       	subi	r16, 0xFF	; 255
 3b6:	1f 4f       	sbci	r17, 0xFF	; 255
 3b8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	08 17       	cp	r16, r24
 3be:	19 07       	cpc	r17, r25
 3c0:	9c f3       	brlt	.-26     	; 0x3a8 <serial_loop+0x4a>
	{
		message.data[i] = RX_DATA();
	}

	serial_process(&message);
 3c2:	ce 01       	movw	r24, r28
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <serial_process>

	TX_SEQUENCE(message.sequence);
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	9a 81       	ldd	r25, Y+2	; 0x02
 3ce:	0e 94 3e 01 	call	0x27c	; 0x27c <serial_tx_2>
	TX_TYPE(message.type);
 3d2:	8b 81       	ldd	r24, Y+3	; 0x03

void serial_tx(char data)
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << UDRE)));
 3d4:	5d 9b       	sbis	0x0b, 5	; 11
 3d6:	fe cf       	rjmp	.-4      	; 0x3d4 <serial_loop+0x76>
	UDR0 = data;
 3d8:	8c b9       	out	0x0c, r24	; 12

	serial_process(&message);

	TX_SEQUENCE(message.sequence);
	TX_TYPE(message.type);
	TX_LENGTH(message.length);
 3da:	8c 81       	ldd	r24, Y+4	; 0x04

void serial_tx(char data)
{
#ifdef __AVR_ATmega128__

	while (!(UCSR0A & (1 << UDRE)));
 3dc:	5d 9b       	sbis	0x0b, 5	; 11
 3de:	fe cf       	rjmp	.-4      	; 0x3dc <serial_loop+0x7e>
	UDR0 = data;
 3e0:	8c b9       	out	0x0c, r24	; 12
 3e2:	00 e0       	ldi	r16, 0x00	; 0
 3e4:	10 e0       	ldi	r17, 0x00	; 0
 3e6:	08 c0       	rjmp	.+16     	; 0x3f8 <serial_loop+0x9a>
	TX_SEQUENCE(message.sequence);
	TX_TYPE(message.type);
	TX_LENGTH(message.length);
	for (int i = 0; i < message.length; i++)
	{
		TX_DATA(message.data[i]);
 3e8:	f6 01       	movw	r30, r12
 3ea:	81 91       	ld	r24, Z+
 3ec:	91 91       	ld	r25, Z+
 3ee:	6f 01       	movw	r12, r30
 3f0:	0e 94 3e 01 	call	0x27c	; 0x27c <serial_tx_2>
	serial_process(&message);

	TX_SEQUENCE(message.sequence);
	TX_TYPE(message.type);
	TX_LENGTH(message.length);
	for (int i = 0; i < message.length; i++)
 3f4:	0f 5f       	subi	r16, 0xFF	; 255
 3f6:	1f 4f       	sbci	r17, 0xFF	; 255
 3f8:	8c 81       	ldd	r24, Y+4	; 0x04
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	08 17       	cp	r16, r24
 3fe:	19 07       	cpc	r17, r25
 400:	9c f3       	brlt	.-26     	; 0x3e8 <serial_loop+0x8a>
	{
		TX_DATA(message.data[i]);
	}
}
 402:	64 96       	adiw	r28, 0x14	; 20
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	cf 91       	pop	r28
 410:	df 91       	pop	r29
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	ff 90       	pop	r15
 418:	ef 90       	pop	r14
 41a:	df 90       	pop	r13
 41c:	cf 90       	pop	r12
 41e:	08 95       	ret

00000420 <init_control>:
static void move_tilt_b();

void init_control()
{
	// Pump - Valve
	PUMP_OFF();
 420:	90 98       	cbi	0x12, 0	; 18
	VALVE_OFF();
 422:	91 98       	cbi	0x12, 1	; 18

#ifdef __AVR_ATmega128__

	// Timer 0 : Pan Motor
	TCCR0 = (1 << WGM01) | (1 << CS02) | (1 << CS01) | (1 << CS00);
 424:	8f e0       	ldi	r24, 0x0F	; 15
 426:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
 428:	12 be       	out	0x32, r1	; 50
	OCR0 = 62;
 42a:	8e e3       	ldi	r24, 0x3E	; 62
 42c:	81 bf       	out	0x31, r24	; 49
	TIMSK |= 1 << OCIE0;
 42e:	87 b7       	in	r24, 0x37	; 55
 430:	82 60       	ori	r24, 0x02	; 2
 432:	87 bf       	out	0x37, r24	; 55

#else
#endif

	// Timer 1 : Tilt Motor
	TCNT1 = 0;
 434:	1d bc       	out	0x2d, r1	; 45
 436:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 20000;
 438:	80 e2       	ldi	r24, 0x20	; 32
 43a:	9e e4       	ldi	r25, 0x4E	; 78
 43c:	97 bd       	out	0x27, r25	; 39
 43e:	86 bd       	out	0x26, r24	; 38
	TILT_NOZZLE = TILT_INIT;
 440:	8c ed       	ldi	r24, 0xDC	; 220
 442:	95 e0       	ldi	r25, 0x05	; 5
 444:	9b bd       	out	0x2b, r25	; 43
 446:	8a bd       	out	0x2a, r24	; 42
	TILT_CAMERA = TILT_INIT;
 448:	99 bd       	out	0x29, r25	; 41
 44a:	88 bd       	out	0x28, r24	; 40

	PORTB = 0xFF;
 44c:	8f ef       	ldi	r24, 0xFF	; 255
 44e:	88 bb       	out	0x18, r24	; 24

	// TCCR1A = (1 << COM1A1) | (1 << COM1B1);
	TCCR1A = 0x00;
 450:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << WGM13) | (1 << CS11);
 452:	82 e1       	ldi	r24, 0x12	; 18
 454:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A) | (1 << OCIE1B);
 456:	87 b7       	in	r24, 0x37	; 55
 458:	88 61       	ori	r24, 0x18	; 24
 45a:	87 bf       	out	0x37, r24	; 55
	TIFR = 0x00;
 45c:	16 be       	out	0x36, r1	; 54

	// Pan
	PAN_ENABLE();
 45e:	e2 e6       	ldi	r30, 0x62	; 98
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	80 68       	ori	r24, 0x80	; 128
 466:	80 83       	st	Z, r24
}
 468:	08 95       	ret

0000046a <__vector_15>:

ISR(SIG_OUTPUT_COMPARE0)
{
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	2f 93       	push	r18
 476:	3f 93       	push	r19
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
	move_tilt_b();
}

static void move_pan()
{
	if (current_step != aimed_step)
 47c:	20 91 13 01 	lds	r18, 0x0113
 480:	30 91 14 01 	lds	r19, 0x0114
 484:	80 91 15 01 	lds	r24, 0x0115
 488:	90 91 16 01 	lds	r25, 0x0116
 48c:	28 17       	cp	r18, r24
 48e:	39 07       	cpc	r19, r25
 490:	51 f1       	breq	.+84     	; 0x4e6 <__vector_15+0x7c>
	{
		if (current_step > aimed_step)
 492:	20 91 13 01 	lds	r18, 0x0113
 496:	30 91 14 01 	lds	r19, 0x0114
 49a:	80 91 15 01 	lds	r24, 0x0115
 49e:	90 91 16 01 	lds	r25, 0x0116
 4a2:	82 17       	cp	r24, r18
 4a4:	93 07       	cpc	r25, r19
 4a6:	5c f4       	brge	.+22     	; 0x4be <__vector_15+0x54>
		{
			PAN_CCW();
 4a8:	80 91 62 00 	lds	r24, 0x0062
 4ac:	82 60       	ori	r24, 0x02	; 2
 4ae:	80 93 62 00 	sts	0x0062, r24
			current_step--;
 4b2:	80 91 13 01 	lds	r24, 0x0113
 4b6:	90 91 14 01 	lds	r25, 0x0114
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	0a c0       	rjmp	.+20     	; 0x4d2 <__vector_15+0x68>
		}
		else
		{
			PAN_CW();
 4be:	80 91 62 00 	lds	r24, 0x0062
 4c2:	8d 7f       	andi	r24, 0xFD	; 253
 4c4:	80 93 62 00 	sts	0x0062, r24
			current_step++;
 4c8:	80 91 13 01 	lds	r24, 0x0113
 4cc:	90 91 14 01 	lds	r25, 0x0114
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	90 93 14 01 	sts	0x0114, r25
 4d6:	80 93 13 01 	sts	0x0113, r24
		}
		
		PAN_CLOCK();
 4da:	80 91 62 00 	lds	r24, 0x0062
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	89 27       	eor	r24, r25
 4e2:	80 93 62 00 	sts	0x0062, r24
}

ISR(SIG_OUTPUT_COMPARE0)
{
	move_pan();
}
 4e6:	9f 91       	pop	r25
 4e8:	8f 91       	pop	r24
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <__vector_12>:

ISR(SIG_OUTPUT_COMPARE1A)
{
 4f8:	1f 92       	push	r1
 4fa:	0f 92       	push	r0
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	8f 93       	push	r24
 504:	9f 93       	push	r25
	}
}

static void move_tilt_a()
{
	PORTB ^= 32;
 506:	88 b3       	in	r24, 0x18	; 24
 508:	90 e2       	ldi	r25, 0x20	; 32
 50a:	89 27       	eor	r24, r25
 50c:	88 bb       	out	0x18, r24	; 24
}

ISR(SIG_OUTPUT_COMPARE1A)
{
	move_tilt_a();
}
 50e:	9f 91       	pop	r25
 510:	8f 91       	pop	r24
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <__vector_13>:

ISR(SIG_OUTPUT_COMPARE1B)
{
 51c:	1f 92       	push	r1
 51e:	0f 92       	push	r0
 520:	0f b6       	in	r0, 0x3f	; 63
 522:	0f 92       	push	r0
 524:	11 24       	eor	r1, r1
 526:	8f 93       	push	r24
 528:	9f 93       	push	r25
	PORTB ^= 32;
}

static void move_tilt_b()
{
	PORTB ^= 64;
 52a:	88 b3       	in	r24, 0x18	; 24
 52c:	90 e4       	ldi	r25, 0x40	; 64
 52e:	89 27       	eor	r24, r25
 530:	88 bb       	out	0x18, r24	; 24
}

ISR(SIG_OUTPUT_COMPARE1B)
{
	move_tilt_b();
}
 532:	9f 91       	pop	r25
 534:	8f 91       	pop	r24
 536:	0f 90       	pop	r0
 538:	0f be       	out	0x3f, r0	; 63
 53a:	0f 90       	pop	r0
 53c:	1f 90       	pop	r1
 53e:	18 95       	reti

00000540 <set_pan>:
	PORTB ^= 64;
}

void set_pan(int step)
{
	aimed_step = step;
 540:	90 93 16 01 	sts	0x0116, r25
 544:	80 93 15 01 	sts	0x0115, r24
}
 548:	08 95       	ret

0000054a <wait_pan>:

void wait_pan()
{
	while (current_step != aimed_step);
 54a:	20 91 13 01 	lds	r18, 0x0113
 54e:	30 91 14 01 	lds	r19, 0x0114
 552:	80 91 15 01 	lds	r24, 0x0115
 556:	90 91 16 01 	lds	r25, 0x0116
 55a:	28 17       	cp	r18, r24
 55c:	39 07       	cpc	r19, r25
 55e:	a9 f7       	brne	.-22     	; 0x54a <wait_pan>
}
 560:	08 95       	ret

00000562 <get_pan>:

int get_pan()
{
	return current_step;
 562:	20 91 13 01 	lds	r18, 0x0113
 566:	30 91 14 01 	lds	r19, 0x0114
}
 56a:	c9 01       	movw	r24, r18
 56c:	08 95       	ret

0000056e <ServDeviceCheck>:
#include "control.h"


void ServDeviceCheck(message_t *m)
{
}
 56e:	08 95       	ret

00000570 <ServEmergency>:

void ServEmergency(message_t *m)
{
	PAN_DISABLE();
 570:	e2 e6       	ldi	r30, 0x62	; 98
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	8f 77       	andi	r24, 0x7F	; 127
 578:	80 83       	st	Z, r24
	VALVE_OFF();
 57a:	91 98       	cbi	0x12, 1	; 18
	PUMP_OFF();
 57c:	90 98       	cbi	0x12, 0	; 18
}
 57e:	08 95       	ret

00000580 <ServPumpOn>:

void ServPumpOn(message_t *m)
{
	PUMP_ON();
 580:	90 9a       	sbi	0x12, 0	; 18
}
 582:	08 95       	ret

00000584 <ServPumpOff>:

void ServPumpOff(message_t *m)
{
	PUMP_OFF();
 584:	90 98       	cbi	0x12, 0	; 18
}
 586:	08 95       	ret

00000588 <ServValveOn>:

void ServValveOn(message_t *m)
{
	VALVE_ON();
 588:	91 9a       	sbi	0x12, 1	; 18
}
 58a:	08 95       	ret

0000058c <ServValveOff>:

void ServValveOff(message_t *m)
{
	VALVE_OFF();
 58c:	91 98       	cbi	0x12, 1	; 18
}
 58e:	08 95       	ret

00000590 <ServTiltNozzleGet>:
	// sync
	wait_pan();
}

void ServTiltNozzleGet(message_t *m)
{
 590:	fc 01       	movw	r30, r24
	m->length = 1;
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	83 83       	std	Z+3, r24	; 0x03
	m->data[0] = TILT_NOZZLE;
 596:	8a b5       	in	r24, 0x2a	; 42
 598:	9b b5       	in	r25, 0x2b	; 43
 59a:	95 83       	std	Z+5, r25	; 0x05
 59c:	84 83       	std	Z+4, r24	; 0x04
}
 59e:	08 95       	ret

000005a0 <ServTiltNozzleSet>:

void ServTiltNozzleSet(message_t *m)
{
	TILT_NOZZLE = m->data[0];
 5a0:	fc 01       	movw	r30, r24
 5a2:	84 81       	ldd	r24, Z+4	; 0x04
 5a4:	95 81       	ldd	r25, Z+5	; 0x05
 5a6:	9b bd       	out	0x2b, r25	; 43
 5a8:	8a bd       	out	0x2a, r24	; 42
}
 5aa:	08 95       	ret

000005ac <ServTiltCameraGet>:

void ServTiltCameraGet(message_t *m)
{
 5ac:	fc 01       	movw	r30, r24
	m->length = 1;
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	83 83       	std	Z+3, r24	; 0x03
	m->data[0] = TILT_CAMERA;
 5b2:	88 b5       	in	r24, 0x28	; 40
 5b4:	99 b5       	in	r25, 0x29	; 41
 5b6:	95 83       	std	Z+5, r25	; 0x05
 5b8:	84 83       	std	Z+4, r24	; 0x04
}
 5ba:	08 95       	ret

000005bc <ServTiltCameraSet>:

void ServTiltCameraSet(message_t *m)
{
	TILT_CAMERA = m->data[0];
 5bc:	fc 01       	movw	r30, r24
 5be:	84 81       	ldd	r24, Z+4	; 0x04
 5c0:	95 81       	ldd	r25, Z+5	; 0x05
 5c2:	99 bd       	out	0x29, r25	; 41
 5c4:	88 bd       	out	0x28, r24	; 40
}
 5c6:	08 95       	ret

000005c8 <ServPanSet>:
	m->length = 1;
	m->data[0] = get_pan();
}

void ServPanSet(message_t *m)
{
 5c8:	0f 93       	push	r16
 5ca:	1f 93       	push	r17
 5cc:	8c 01       	movw	r16, r24
	wait_pan();
 5ce:	0e 94 a5 02 	call	0x54a	; 0x54a <wait_pan>
	set_pan(m->data[0]);
 5d2:	f8 01       	movw	r30, r16
 5d4:	84 81       	ldd	r24, Z+4	; 0x04
 5d6:	95 81       	ldd	r25, Z+5	; 0x05
 5d8:	0e 94 a0 02 	call	0x540	; 0x540 <set_pan>
	
	// sync
	wait_pan();
 5dc:	0e 94 a5 02 	call	0x54a	; 0x54a <wait_pan>
}
 5e0:	1f 91       	pop	r17
 5e2:	0f 91       	pop	r16
 5e4:	08 95       	ret

000005e6 <ServPanGet>:
	VALVE_OFF();
}


void ServPanGet(message_t *m)
{
 5e6:	0f 93       	push	r16
 5e8:	1f 93       	push	r17
 5ea:	8c 01       	movw	r16, r24
	wait_pan();
 5ec:	0e 94 a5 02 	call	0x54a	; 0x54a <wait_pan>
	m->length = 1;
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	f8 01       	movw	r30, r16
 5f4:	83 83       	std	Z+3, r24	; 0x03
	m->data[0] = get_pan();
 5f6:	0e 94 b1 02 	call	0x562	; 0x562 <get_pan>
 5fa:	f8 01       	movw	r30, r16
 5fc:	95 83       	std	Z+5, r25	; 0x05
 5fe:	84 83       	std	Z+4, r24	; 0x04
}
 600:	1f 91       	pop	r17
 602:	0f 91       	pop	r16
 604:	08 95       	ret

00000606 <__divmodhi4>:
 606:	97 fb       	bst	r25, 7
 608:	09 2e       	mov	r0, r25
 60a:	07 26       	eor	r0, r23
 60c:	0a d0       	rcall	.+20     	; 0x622 <__divmodhi4_neg1>
 60e:	77 fd       	sbrc	r23, 7
 610:	04 d0       	rcall	.+8      	; 0x61a <__divmodhi4_neg2>
 612:	0c d0       	rcall	.+24     	; 0x62c <__udivmodhi4>
 614:	06 d0       	rcall	.+12     	; 0x622 <__divmodhi4_neg1>
 616:	00 20       	and	r0, r0
 618:	1a f4       	brpl	.+6      	; 0x620 <__divmodhi4_exit>

0000061a <__divmodhi4_neg2>:
 61a:	70 95       	com	r23
 61c:	61 95       	neg	r22
 61e:	7f 4f       	sbci	r23, 0xFF	; 255

00000620 <__divmodhi4_exit>:
 620:	08 95       	ret

00000622 <__divmodhi4_neg1>:
 622:	f6 f7       	brtc	.-4      	; 0x620 <__divmodhi4_exit>
 624:	90 95       	com	r25
 626:	81 95       	neg	r24
 628:	9f 4f       	sbci	r25, 0xFF	; 255
 62a:	08 95       	ret

0000062c <__udivmodhi4>:
 62c:	aa 1b       	sub	r26, r26
 62e:	bb 1b       	sub	r27, r27
 630:	51 e1       	ldi	r21, 0x11	; 17
 632:	07 c0       	rjmp	.+14     	; 0x642 <__udivmodhi4_ep>

00000634 <__udivmodhi4_loop>:
 634:	aa 1f       	adc	r26, r26
 636:	bb 1f       	adc	r27, r27
 638:	a6 17       	cp	r26, r22
 63a:	b7 07       	cpc	r27, r23
 63c:	10 f0       	brcs	.+4      	; 0x642 <__udivmodhi4_ep>
 63e:	a6 1b       	sub	r26, r22
 640:	b7 0b       	sbc	r27, r23

00000642 <__udivmodhi4_ep>:
 642:	88 1f       	adc	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	5a 95       	dec	r21
 648:	a9 f7       	brne	.-22     	; 0x634 <__udivmodhi4_loop>
 64a:	80 95       	com	r24
 64c:	90 95       	com	r25
 64e:	bc 01       	movw	r22, r24
 650:	cd 01       	movw	r24, r26
 652:	08 95       	ret

00000654 <_exit>:
 654:	f8 94       	cli

00000656 <__stop_program>:
 656:	ff cf       	rjmp	.-2      	; 0x656 <__stop_program>
